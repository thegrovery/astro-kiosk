---
description: additional Astro rules
globs: .astro
alwaysApply: false
---
## Component Structure

When working in .astro files, make sure you always maintain the 'component script' section of the code, which is formatted similar to frontmatter in markdown, using a code fence (---). Here is an example: 

```
---
import SomeAstroComponent from '@components/SomeAstroComponent.astro';
import SomeReactComponent from '@components/SomeReactComponent.jsx';
import someData from '@data/pokemon.json';

// Access passed-in component props, like `<X title="Hello, World" />`
const { title } = Astro.props;
// Fetch external data, even from a private API or database
const data = await fetch('SOME_SECRET_API_URL/users').then(r => r.json());
---
<!-- Your component here! -->
```

When importing components, try to use the '@' alias paths whenever possible. Be sure to reference the project's tsconfig file to be sure that the alias path you are referencing actually exists.

Include the component's CSS as a `<style>` tag inside the component file. Also include the JS inside the component file, unless it's a project-wide function that applies to multiple elements.